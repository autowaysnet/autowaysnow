<?php

declare(strict_types=1);

/*
 * AutoWaysNetworkLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace AutoWaysNetworkLib\Controllers;

use AutoWaysNetworkLib\Exceptions\ApiException;
use AutoWaysNetworkLib\ConfigurationInterface;
use AutoWaysNetworkLib\ApiHelper;
use AutoWaysNetworkLib\Http\HttpRequest;
use AutoWaysNetworkLib\Http\HttpResponse;
use AutoWaysNetworkLib\Http\HttpMethod;
use AutoWaysNetworkLib\Http\HttpContext;
use AutoWaysNetworkLib\Http\HttpCallBack;
use Unirest\Request;

class APIController extends BaseController
{
    public function __construct(ConfigurationInterface $config, array $authManagers, ?HttpCallBack $httpCallBack)
    {
        parent::__construct($config, $authManagers, $httpCallBack);
    }

    /**
     * recherche des plaques d’immatriculation française qui remontée des informations de plus de 50
     * champs concernant le véhicule, l’API est destinée pour les sites web, applications web de métier et
     * applications mobile.
     *
     * @param string $plaque Plaque d'immatriculation française
     * @param string $token Votre clé token vous sera livrée par e-mail après l'inscription.
     *
     * @return string Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function aPISIV(string $plaque, string $token): string
    {
        //prepare query string for API call
        $_queryUrl = $this->config->getBaseUri(Server::DEFAULT_) . '/autowayapi';

        //process query parameters
        ApiHelper::appendUrlWithQueryParameters($_queryUrl, [
            'plaque' => $plaque,
            'token'  => $token,
        ]);

        //prepare headers
        $_headers = [
            'user-agent'    => self::$userAgent
        ];

        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);

        //call on-before Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        // and invoke the API call request to fetch the response
        try {
            $response = Request::get($_httpRequest->getQueryUrl(), $_httpRequest->getHeaders());
        } catch (\Unirest\Exception $ex) {
            throw new ApiException($ex->getMessage(), $_httpRequest);
        }


        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //Error handling using HTTP status codes
        if ($response->code == 400) {
            throw new ApiException('quota expire', $_httpRequest, $_httpResponse);
        }

        if ($response->code == 401) {
            throw new ApiException('token invalid', $_httpRequest, $_httpResponse);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpRequest);
        return $response->body;
    }
}
